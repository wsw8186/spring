package com.example.ex01.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.ex01.config.auth.exception.CustomAccessDeniedHandler;
import com.example.ex01.config.auth.exception.CustomAuthenticationEntryPoint;
import com.example.ex01.config.auth.loginHandler.CustomAuthenticationFailureHandler;
import com.example.ex01.config.auth.loginHandler.CustomLoginSuccessHandler;
import com.example.ex01.domain.service.PrincipalDetailsServiceImpl;

@Configuration
@EnableWebSecurity
public class SecurityConfig  extends WebSecurityConfigurerAdapter{
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private PrincipalDetailsServiceImpl prinipalDetailsServiceImpl;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		//권한체크
		http.authorizeRequests()
			.antMatchers("/","/logout","/join").permitAll()
			.antMatchers("/user").hasRole("USER")
			.antMatchers("/member").hasRole("MEMBER")
			.antMatchers("/admin").hasRole("ADMIN")
			.anyRequest().authenticated();
		
		//로그인
		http.formLogin()
			.loginPage("/login")
			.permitAll()
			.successHandler(new CustomLoginSuccessHandler()) //로그인 성공시 처리
			.failureHandler(new CustomAuthenticationFailureHandler()); //로그인 실패시 처리
		
		
		//로그아웃
		http.logout()
			.permitAll()
			.addLogoutHandler(new CustomLogoutHandler());
			
			
		
		//예외처리
		http.exceptionHandling()
			.authenticationEntryPoint(new CustomAuthenticationEntryPoint()) //미인증 사용자 예외처리
			.accessDeniedHandler(new CustomAccessDeniedHandler()); //권한 실패(부족)시 예외처리
			
		
		
		//REMEMBER_ME
			
	}


	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
//		auth.inMemoryAuthentication()
//			.withUser("user")
//			.password(passwordEncoder.encode("1234"))
//			.roles("USER");
//		
//		auth.inMemoryAuthentication()
//			.withUser("member")
//			.password(passwordEncoder.encode("1234"))
//			.roles("MEMBER");
//		
//		auth.inMemoryAuthentication()
//			.withUser("admin")
//			.password(passwordEncoder.encode("1234"))
//			.roles("ADMIN");
		auth.userDetailsService(prinipalDetailsServiceImpl).passwordEncoder(passwordEncoder);
	}
	
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}		

	
		
	
}
